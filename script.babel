class Editor extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      markdownInput: defaultText,
      editorMax: false,
      previewerMax: false
    }
    
  this.handleChange = this.handleChange.bind(this);
  this.changeClassEditor = this.changeClassEditor.bind(this);
  this.changeClassPreviewer = this.changeClassPreviewer.bind(this);
  };
  
  handleChange(event) {
    this.setState({
      markdownInput: event.target.value
    });
  }

  changeClassEditor() {
    if (this.state.editorMax == false) {
      this.setState(prevState => ({ 
        editorMax: !prevState.editorMax 
      }));
    }
    if (this.state.editorMax == true) {
      this.setState(prevState => ({ 
        editorMax: !prevState.editorMax 
      }));
    }    
  }
  
  changeClassPreviewer() {
    if (this.state.previewerMax == false) {
      this.setState(prevState => ({ 
        previewerMax: !prevState.previewerMax 
      }));
    }
    if (this.state.previewerMax == true) {
      this.setState(prevState => ({ 
        previewerMax: !prevState.previewerMax 
      }));
    }      
  }  

  
  render() {
    return (
      (this.state.editorMax == true ? 
        <div id='containerdiv'>
          <br />
          <div id='editordiv'>
          <h5 id='editorheader' className='maxscreeneditorheader'>Editor<i id='fullscreenbuttoneditor' onClick={this.changeClassEditor} className="fa fa-compress" aria-hidden="true"></i></h5>
          <textarea id='editortext' className='maxscreeneditor' value={this.state.markdownInput} onChange={this.handleChange}/>
          </div>        
          <br />
          <div id='previewerdiv' className='hidethecontent'>
          <h5 id='previewheader'>Previewer<i id='fullscreenbuttonpreviewer' className="fa fa-arrows-alt" aria-hidden="true"></i></h5>
          <Preview markdownInput={this.state.markdownInput}/>
          </div>
        </div> 
       : this.state.previewerMax == true ?
        <div id='containerdiv'>
          <br />
          <div id='editordiv' className='hidethecontent'>
          <h5 id='editorheader'>Editor<i id='fullscreenbuttoneditor' onClick={this.changeClass} className="fa fa-arrows-alt" aria-hidden="true"></i></h5>
          <textarea id='editortext' value={this.state.markdownInput} onChange={this.handleChange}/>
          </div>        
          <br />
          <div id='previewerdiv'>
          <h5 id='previewheader' className='maxscreenpreviewerheader'>Previewer<i id='fullscreenbuttonpreviewer' onClick={this.changeClassPreviewer} className="fa fa-compress" aria-hidden="true"></i></h5>
          <Preview classNameForProp='maxscreenpreviewer' markdownInput={this.state.markdownInput}/>
          </div>
        </div> :       
        <div id='containerdiv'>
          <br />
          <div id='editordiv'>
          <h5 id='editorheader' className='editorheader'>Editor<i id='fullscreenbuttoneditor' onClick={this.changeClassEditor} className="fa fa-arrows-alt" aria-hidden="true"></i></h5>
          <textarea id='editortext' className='editortext' value={this.state.markdownInput} onChange={this.handleChange}/>
          </div>        
          <br />
          <div id='previewerdiv'>
          <h5 id='previewheader' className='previewheader'>Previewer<i id='fullscreenbuttonpreviewer' onClick={this.changeClassPreviewer} className="fa fa-arrows-alt" aria-hidden="true"></i></h5>
          <Preview classNameForProp='previewtext' markdownInput={this.state.markdownInput}/>
          </div>
        </div>) 
    );
  }
}
  

class Preview extends React.Component {
  constructor(props) {
    super(props);
  }
  
  getMarkdownText() {
    var rawMarkdownText = marked(this.props.markdownInput, {sanitize: true});
    return { __html: rawMarkdownText };
  }
      
  render() {
    return (
      <div className={this.props.classNameForProp} dangerouslySetInnerHTML={this.getMarkdownText()} />
    );
  };
}

var defaultText = 
`# Welcome to my React Markdown Previewer!

## This is a sub-heading...
### And here's some other cool stuff:
  
Heres some code, \`<div></div>\`, between 2 backticks.

\`\`\`\`
// this is multi-line code:

function anotherExample(firstLine, lastLine) {
  if (firstLine == '\`\`\`' && lastLine == '\`\`\`') {
    return multiLineCode;
  }
}
\`\`\`\`
  
You can also make text **bold**... whoa!
Or _italic_.
Or... wait for it... **_both!_**
And feel free to go crazy ~~crossing stuff out~~.

There's also [links](https://www.freecodecamp.com)

- And of course there are lists.
  - Some are bulleted.
     - With different indentation levels.
        - That look like this.


1. And there are numbererd lists too.
1. Use just 1s if you want! 
1. But the list goes on...
- Even if you use dashes or asterisks.
* And last but not least, let's not forget embedded images:

![React Logo w/ Text](https://goo.gl/Umyytc)
`
                      
ReactDOM.render(<Editor />, document.getElementById('app'));